@top HTTPQL {
  Query?
}

@precedence { and @left, or @left }

// Define tokens for basic syntax elements
@tokens {
  // Whitespace and delimiters
  whitespace { @whitespace }
  LeftParen { "(" }
  RightParen { ")" }
  Dot { "." }
  Colon { ":" }
  Hex  { $[0-9a-fA-F] }

  // Logical operators
  And { "AND" | "and" }
  Or { "OR" | "or" }

  // Namespaces
  RowNamespace { "row" }
  RequestNamespace { "req" }
  ResponseNamespace { "resp" }
  PresetNamespace { "preset" }

  // Row field names
  RowIntFieldName { "id" }

  // Request field names
  RequestStringFieldName { "ext" | "host" | "method" | "path" | "query" | "raw" }
  RequestIntFieldName { "port" }
  RequestDateFieldName { "created_at" }

  // Response field names
  ResponseStringFieldName { "raw" }
  ResponseIntFieldName { "code" | "roundtrip" }

  // Operators for string and integer types
  StringOperator { "cont" | "ncont" | "eq" | "ne" | "like" | "nlike"}
  RegexOperator { "regex" | "nregex" }
  IntOperator { "eq" | "gt" | "gte" | "lt" | "lte" | "ne" }
  DateOperator { "lt" | "gt" }

  // Value types
  SymbolValue { $[a-z0-9-_]+ }
  IntValue { @digit+ }

  // String
  StringChar { $[\u{20}\u{21}\u{23}-\u{5b}\u{5d}-\u{10ffff}] | "\\" StringEscape }
  StringEscape  { $["\\\/bfnrt] | "u" Hex Hex Hex Hex }
}

@local tokens {
  regexEnd[@name='/'] { '/' }
  regexEscape { "\\" _ }
  @else regexContent
}

@skip {} {
  StringValue { '"' StringChar* '"' }
  RegexContent { (regexContent | regexEscape)* }
  RegexValue { '/' RegexContent regexEnd }
}

// Define non-token rules for constructing expressions
@skip { whitespace }
@detectDelim

Query { StringQuery | GroupQuery | SingleQuery | CombinedQuery }

StringQuery { StringValue }
GroupQuery { LeftParen Query? RightParen }

CombinedQuery { Query !and And Query | Query !or Or Query }

SingleQuery { RowQuery | RequestQuery | ResponseQuery | PresetQuery }

IntExpression { IntOperator Colon IntValue }
StringExpression { StringOperator Colon StringValue | RegexOperator Colon (RegexValue | StringValue) }
DateExpression { DateOperator Colon StringValue }
PresetNameExpression { StringValue }
PresetAliasExpression { SymbolValue }

RowQuery { RowNamespace Dot RowIntFieldName Dot IntExpression }

RequestQuery {
  RequestNamespace Dot RequestIntFieldName Dot IntExpression |
  RequestNamespace Dot RequestStringFieldName Dot StringExpression |
  RequestNamespace Dot RequestDateFieldName Dot DateExpression
}

ResponseQuery {
  ResponseNamespace Dot ResponseIntFieldName Dot IntExpression |
  ResponseNamespace Dot ResponseStringFieldName Dot StringExpression
}

PresetQuery {
  PresetNamespace Colon (PresetNameExpression | PresetAliasExpression)
}

@external propSource highlight from "./props.js"
